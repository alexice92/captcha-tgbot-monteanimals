import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ChatPermissions, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from datetime import datetime, timedelta

from captchaDB import generate_emoji_options, generate_hashed_emoji
from configs import API_TOKEN, CAPTCHA_TIMEOUT

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pending_users = {}


@dp.message_handler(content_types=types.ContentType.NEW_CHAT_MEMBERS)
async def on_new_member(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        new_member = message.new_chat_members[0]
        chat_id = message.chat.id
        user_id = new_member.id
        salt = str(random.randint(1000, 9999))  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π "—Å–æ–ª–∏"

        logging.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {new_member.full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")

        # –û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        await bot.restrict_chat_member(
            chat_id,
            user_id,
            permissions=ChatPermissions(can_send_messages=False)
        )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å —ç–º–æ–¥–∑–∏
        buttons, correct_emoji = generate_emoji_options(salt)
        hashed_answer = generate_hashed_emoji(correct_emoji, salt)

        keyboard = InlineKeyboardMarkup(row_width=5)
        keyboard.add(*buttons)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π
        msg = await message.reply(
            f"–ü—Ä–∏–≤–µ—Ç, {new_member.first_name}! –í—ã–±–µ—Ä–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ ü¶é (—è—â–µ—Ä–∏—Ü—É), —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã –Ω–µ —Å–ø–∞–º–µ—Ä.",
            reply_markup=keyboard
        )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        pending_users[user_id] = {
            "chat_id": chat_id,
            "message_id": msg.message_id,
            "correct_hash": hashed_answer,
            "salt": salt,
            "expire_time": datetime.utcnow() + timedelta(seconds=CAPTCHA_TIMEOUT),
        }

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º-–∞—É—Ç –Ω–∞ –æ—Ç–≤–µ—Ç
        await asyncio.sleep(CAPTCHA_TIMEOUT)
        if user_id in pending_users and datetime.utcnow() > pending_users[user_id]["expire_time"]:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_member.full_name} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏.")
            await bot.send_message(
                chat_id,
                f"{new_member.first_name} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ—Å—Ç–∞–µ—Ç—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏."
            )
            del pending_users[user_id]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith("captcha_"))
async def handle_captcha(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–∞–ø—á—É"""
    try:
        user_id = callback_query.from_user.id
        data = callback_query.data.split("_")
        hashed_value = data[1]
        target_user_id = int(data[2])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –∏–º–µ–Ω–Ω–æ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
        if user_id != target_user_id:
            await callback_query.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç—É –∫–∞–ø—á—É.")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} –ø—ã—Ç–∞–ª—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
        if user_id not in pending_users:
            await callback_query.answer("–ö–∞–ø—á–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            return

        user_data = pending_users[user_id]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        if datetime.utcnow() > user_data["expire_time"]:
            await callback_query.message.edit_text("–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–æ. –¢—ã –æ—Å—Ç–∞–µ—à—å—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")
            del pending_users[user_id]
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} –Ω–µ —É—Å–ø–µ–ª –æ—Ç–≤–µ—Ç–∏—Ç—å.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if hashed_value == user_data["correct_hash"]:
            # –°–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            await bot.restrict_chat_member(
                user_data["chat_id"],
                user_id,
                permissions=ChatPermissions(can_send_messages=True)
            )
            await callback_query.message.edit_text("–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É.")
        else:
            await callback_query.message.edit_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –¢—ã –æ—Å—Ç–∞–µ—à—å—Å—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.")
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} –¥–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.")

        # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
        del pending_users[user_id]

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–ø—á–∏: {e}")


if __name__ == "__main__":
    from aiogram import asyncio  # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
    executor.start_polling(dp, skip_updates=True)
